---
import "aos/dist/aos.css";
import "../styles/globals.css";
import OrderDrawer from "@/components/OrderDrawer";
import { Schema } from "astro-seo-schema";
interface Props {
  title: string;
  keywords?: string;
  description?: string;
  prefetch?: string;
  seoSchemas?: any[];
}

const { title, keywords, description, prefetch, seoSchemas } = Astro.props;
---

<!doctype html>
<html lang="fa" dir="rtl" class="dark font-custom">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon2.svg" />
    <link rel="stylesheet" href="/fonts/font.css" />
    <meta name="generator" content={Astro.generator} />
    {prefetch && <link rel="prefetch" href={prefetch} />}
    <title>{title}</title>
    {seoSchemas?.map((seoSchema) => <Schema item={seoSchema} />)}
  </head>
  <body class="bg-background overflow-x-hidden">
    <slot />
    <OrderDrawer client:load />
  </body><script>
    import AOS from "aos";
    window.addEventListener("load", function () {
      AOS.init();
    });
    window.addEventListener("DOMContentLoaded", () => {
      function initAccordion() {
        const a = document.querySelectorAll("[data-element=accordion]");
        a.forEach((e) => {
          const s = e.querySelector("[data-element=accordion-btn]"),
            i = e.querySelector("[data-element=accordion-chevron]"),
            r = e.querySelector("[data-element=accordion-content]");

          s &&
            r &&
            i &&
            s.addEventListener(
              "click",
              (c) => (
                console.log("event aded"),
                e.classList.contains("active")
                  ? (e.classList.remove("active"),
                    s.setAttribute("aria-expanded", "false"),
                    (r.style.maxHeight = "0px"),
                    i.classList.remove("rotate-180"),
                    setTimeout(() => {
                      r.classList.add("hidden");
                    }, 300))
                  : (e.classList.add("active"),
                    s.setAttribute("aria-expanded", "true"),
                    r.classList.remove("hidden"),
                    (r.style.maxHeight = r.scrollHeight + "px"),
                    i.classList.add("rotate-180"),
                    a.forEach((t) => {
                      t !== e &&
                        (t.classList.remove("active"),
                        t
                          .querySelector("[data-element=accordion-btn]")
                          ?.setAttribute("aria-expanded", "false"),
                        t
                          .querySelector("[data-element=accordion-content]")
                          ?.setAttribute("style", "max-height: 0px"),
                        t
                          .querySelector("[data-element=accordion-chevron]")
                          ?.classList.remove("rotate-180"),
                        setTimeout(() => {
                          t.querySelector(
                            "[data-element=accordion-content]"
                          )?.classList.add("hidden");
                        }, 300));
                    })),
                c.preventDefault(),
                !1
              )
            );
        });
      }
      // init
      initAccordion();

      // format time
      function formatTime(timestamp) {
        const now = new Date();
        const date = new Date(timestamp);
        const diffInSeconds = Math.floor((now - date) / 1000);

        if (diffInSeconds < 60) return "همین الان";
        if (diffInSeconds < 3600)
          return `${Math.floor(diffInSeconds / 60)} دقیقه پیش`;
        if (diffInSeconds < 86400)
          return `${Math.floor(diffInSeconds / 3600)} ساعت پیش`;
        if (diffInSeconds < 604800)
          return `${Math.floor(diffInSeconds / 86400)} روز پیش`;
        if (diffInSeconds < 2592000)
          return `${Math.floor(diffInSeconds / 604800)} هفته پیش`;
        if (diffInSeconds < 31536000)
          return `${Math.floor(diffInSeconds / 2592000)} ماه پیش`;
        return "خیلی وقت پیش";
      }

      const timeTags = document.querySelectorAll("[data-element=comment-date]");
      if (timeTags.length) {
        timeTags.forEach((tag) => {
          const date = tag.getAttribute("datetime");
          tag.textContent = formatTime(date);
        });
      }
    });
  </script>
</html>
